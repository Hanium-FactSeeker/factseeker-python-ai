import os
import re
from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate


def get_chat_llm():
    """LangChain용 ChatOpenAI 모델을 초기화합니다."""
    # OpenAI API 키는 .env에서 로드됩니다.
    return ChatOpenAI(model="gpt-4o", temperature=0, request_timeout=60, max_retries=5)  

def build_claim_extractor():
    prompt = PromptTemplate.from_template("""
[역할]
당신은 정치 유튜브 영상 또는 발화문에서 추출된 문장이 **팩트체크 가능한 주장인지**를 판단하고, 
검증 가능한 경우 **사실 검증이 가능한 정제 문장으로 재구성**하는 전문가입니다.

# ──────────────────────────────────────────────
# <<수정>> [최상위 핵심 원칙 (Master Rule)]
# ──────────────────────────────────────────────
# 1. [절대 원칙] 자막에 명시적으로 언급되지 않은 정보, 뉘앙스, 단어는 절대로 추가하거나 왜곡하지 마세요. (가장 중요)
# 2. [출력 형식 준수] 아래 [출력 형식] 섹션에 명시된 포맷을 다른 모든 지침에 우선하여 반드시 지켜주세요.
# 3. [단일 주장 분리] 하나의 문장에 여러 주장이 있다면, 각각의 주장을 별개의 문장으로 분리하여 개별적으로 판단하고 출력해야 합니다.

[판단 목적]
- 문장이 참인지 거짓인지를 따지는 것이 아니라, **객관적 사실 여부를 검증할 수 있는 주장인지**를 선별하는 것이 목표입니다.
- 팩트체크 가능한 경우에는, **정확하고 간결한 (주어+목적어+서술어) 문장 형태로 정제**하여 출력해야 합니다.

[출력 형식]
# <<수정>> 이 출력 형식은 모든 규칙에 우선하는 절대적인 규칙입니다.
# <<수정>> 다른 어떤 텍스트도 없이, 아래 형식만 정확히 지켜서 출력하세요.

- [번호] 정제된 주장 문장. → (분류): 사유
- [번호] 정제된 주장 문장. → (분류): 사유

# <<수정>> (잘못된 출력 예시)
# - 팩트체크 시작: (1/5) '주장' -> 이런 접두어 절대 금지
# - 1. 주장에 대한 코멘트... -> 코멘트 없이 형식 그대로 출력

[판단 기준]

**팩트체크 가능 (검증 가능한 구체적 사실이 포함된 경우)**:
- 수치, 통계, 금액, 연도 등 **객관적 데이터**가 명시된 경우
- 인물의 **발언, 행동, 결정, 경력 등**이 드러난 경우
- **정책, 제도, 조직 구조, 법안 등**의 설명이 포함된 경우
- **보도·공식문서로 확인 가능한 의혹 제기** 등

**팩트체크 불가능 (모호하거나 주관적 판단 중심)**:
- 감정, 해석, 비난, 주관적 평가 중심인 경우
- 은유, 과장, 추측, 음모론 등으로 **사실 판단 기준이 불명확**한 경우
- 당위적 주장, 가치 판단, 예측 중심의 문장 (예: ~해야 한다, ~일 것이다)
- 주체, 행위, 시점 등이 불분명하거나 불특정한 경우
- **정치적 맥락 부적합**: 정치적 팩트체크의 의미가 없는 단순 사실 (예: '윤석열 대통령의 생일은 1960년 12월 18일이다.')
- **광고/홍보성 문구**: 제품이나 서비스에 대한 광고, 홍보, 마케팅 문구 (예: '이 제품은 최고의 품질을 자랑합니다.')

[정제 지시]

- **발언자 명시**: 반드시 **발언자명을 포함**한 단일 주장 문장으로 정제하세요. 발언자가 없으면 **"(발언자 미상)"**으로 표기하세요.
- **행위 구체화**: '지시했다', '비판했다' 등 행위성 발언은 **그 대상(무엇을)을 포함**해 문장을 완성하세요.
- **인식 오류 표현**: 발언자가 수치, 사실 등을 명백히 오해한 경우, "A는 B를 C로 착각하고 있다." 또는 "A는 B에 대해 잘못된 인식을 드러냈다." 와 같이 정제하세요.
- **주어 없는 주장 처리**: 
    - 자막에 주어가 없더라도 주장의 핵심이 특정 주체의 행위/인식에 대한 것이라면, '특정 인물은', '발언자는' 등의 주어를 사용해 정제할 수 있습니다. 
    - (예: "국가 경제 수치를 인지하지 못한다는 사실이 드러난 겁니다." → "발언자는 국가 경제 수치를 제대로 인지하지 못하고 있다.")
    - # <<수정>> 단, 이 규칙은 [최상위 핵심 원칙]의 '없는 정보 추가 금지' 원칙을 위배하지 않는 선에서만 적용됩니다. 맥락상 명백할 때만 사용하세요.

[주어 오판 방지 규칙]
- 특정 인물의 이름이 언급되었더라도, 그가 직접 발언한 내용이 자막에 명확히 없으면 주어로 지정하지 마세요.
- (예: "김상욱도 똑같이 얘기했어요" 라는 자막은, '김상욱'이 주어가 아니라 '유튜버'가 '김상욱이 똑같이 얘기했다고 주장했다'는 의미이므로, 김상욱을 주어로 한 claim을 생성하면 안 됩니다.)

[예시 출력]
- [1] 김민석은 국가 채무 비율을 20~30%로 착각하고 있다. → (부분 가능): 발언 여부는 검증 가능하나 '착각'이라는 표현은 수사적임
- [2] 김민석은 국가 예산이 673조 원이라는 사실을 모르고 있다. → (부분 가능): 핵심은 사실이나 '모르고 있다'는 표현은 과장
- [3] 김민석에게 출판 기념회 돈봉투 의혹이 제기되었다. → 팩트체크 가능
- [4] 오늘 오전에 윤석열 대통령이 파면됐다. → 팩트체크 가능
- [5] 김민석은 정치적으로 죽었다. → 팩트체크 불가능 (주관적 표현 + 검증 불가)
- [6] 대한민국 경제의 기본 수치를 제대로 인지하지 못하고 있다는 사실이 드러난 겁니다. → 팩트체크 가능 (정제: 발언자는 대한민국 경제의 기본 수치를 제대로 인지하지 못하고 있다.)

입력:
{transcript}

출력:
""")
    return prompt | get_chat_llm()


def build_claim_summarizer():
    """정치적 주장을 뉴스 검색에 최적화된 핵심 키워드 구문으로 요약합니다."""
    prompt = PromptTemplate.from_template("""
다음 정치적 주장을 **뉴스 검색에 효과적인 핵심 키워드 구문**으로 요약하세요.

[규칙]
1.  **문장 형태는 절대 사용하지 마세요.** → 핵심 명사 중심의 구문으로 출력
2.  **주어(인물, 기관 등) + 핵심 주제(사건, 대상 등) 조합으로 구성**
3.  다음은 **절대 포함하지 마세요**:
    - 말하는 행위 (예: 발언, 주장, 언급, 밝혔다, 말했다)
    - **숫자, 비율, 퍼센트(%), 날짜, 연도 등 구체적인 수치는 절대 포함하지 마세요.** (예: 673조 원, 20%, 48.4%, 2022년)
    - **인물의 지식 상태나 행동 방식, 부정적 평가를 나타내는 단어 (예: 모른다, 착각, 회피, 얼버무림, 엉뚱한, 실언, 알고 있지 않다, 대응, 애매모호, 정확히 말하지 않음, 노력하지 않음, 관심 없음, 배신, 자폭, 이중대, 기회주의자, 아이콘, 발판 등 모든 부정적/주관적/행동 양식/평가 관련 단어).** 이러한 단어들이 주장에 포함되어 있더라도 검색어에서는 반드시 제거해야 합니다.
4.  **고유명사(인물, 기관, 지역 등)는 반드시 포함하세요.**
5.  **'회차', '시점'과 같이 시간의 흐름을 나타내는 일반적인 단어는 필요 시 포함하세요.**
6.  실제 기사 제목에서 자연스럽게 나올 법한 표현으로 구성하세요.

[출력 형식]
- 단 하나의 구문 (예: 김민석 의원 국가 채무 OECD 평균)

[예시]
입력: "김민석은 대한민국 국가 예산이 673조 원이라는 사실을 모른다."
출력: 김민석 대한민국 국가 예산

입력: "김민석은 국가 채무 비율을 20에서 30%로 착각하고 있다."
출력: 김민석 국가 채무 비율

입력: "김민석은 국가 채무 비율을 회피하려고 했다."
출력: 김민석 국가 채무 비율

입력: "김민석은 국가 채무 비율을 OECD 평균보다 높다고도 하고 낮다고도 한다는 식으로 얼버무렸다."
출력: 김민석 국가 채무 비율 OECD 평균

입력: "김민석은 국가 예산에 대해 엉뚱한 수치를 언급한 적이 있다."
출력: 김민석 국가 예산

입력: "대한민국 국가 채무 비율은 48.4%이다."
출력: 대한민국 국가 채무 비율

입력: "국가 채무 비율이 49.0%까지 갈 수 있다는 전망이 있다."
출력: 국가 채무 비율 전망

입력:
{claim}

출력:
""")
    return prompt | get_chat_llm()

def build_factcheck_chain():
    prompt = PromptTemplate.from_template("""
[역할]
당신은 주어진 기사 내용이 특정 정치적 주장과 관련 있는지, 그리고 해당 기사가 그 주장을 사실로 뒷받침하는지를 판별하는 전문가입니다.

[판단 목표]
- 주어진 기사 본문이 해당 주장을 뒷받침하는 '사실 설명(evidence)'을 포함하는지 여부를 판별합니다.
- 기사에 나타난 정보가 주장과 **논리적으로 관련**이 있고, 주장 내용을 **사실로 설명하고 있는지**를 판단합니다.

[판단 기준]

1. **관련성 판단**:
    - 기사 내에 주장에 등장하는 핵심 인물(주어) 및 핵심 행위(예: 지명, 발언, 조치 등)가 언급되어야 합니다.
    - 명확한 시점이나 사건이 일치하면 더욱 관련성 높게 평가합니다.
    - 기사 전체가 아닌 일부라도 주장과 **논리적 관련성**이 있으면 "관련성 있음"으로 판단하세요.

2. **사실 설명 판단**:
    - 관련 인물, 사실, 사건, 수치 등이 **기사 내에 구체적 설명**으로 제시된 경우 '사실 설명 있음'으로 판단합니다.
    - 단순 인용, 추측, 모호한 묘사는 '사실 설명 없음'으로 판단합니다.

3. **키워드 흩어짐에 대한 보완 판단**:
    - 기사 본문에서 주장의 주어, 시점, 행위가 **문장별로 흩어져 있더라도**, 전체 문맥상 조합하여 주장 내용을 사실로 뒷받침하는 경우에는 ‘관련성 있음 / 사실 설명 있음’으로 판단해야 합니다.
    - 예시: 기사에 '이진숙', '임명', '윤석열 정부'라는 키워드가 모두 존재할 경우 → "이진숙 방송통신위원장은 윤석열 정부 시절 임명된 인물이다"는 사실 설명 있음으로 간주해야 합니다.

4. **주의 사항**:
    - 문장 일치 여부가 아닌 의미 일치 여부를 판단하세요.
    - 출처가 명확한 정보 또는 공공기관/언론 보도를 바탕으로 설명된 내용은 '사실 설명 있음'으로 판단합니다.
    - 단순 주장, 평가, 논평은 '사실 설명 없음'입니다.

[출력 형식]
다음 형식으로 간결하게 판단 결과를 작성하세요:

- 관련성: 예 / 아니오  
- 사실 설명 여부: 예 / 아니오  
- 간단한 설명: (왜 그렇게 판단했는지 요약)
- **핵심 근거 문장: 뉴스 본문에서 관련성 판단의 근거가 되는 문장과 그 앞뒤 문장을 포함하여 세 문장으로 추출 (원문 그대로)**

입력:
---
주장: {claim}

기사:
{context}
---
출력:
""")
    return prompt | get_chat_llm()


def build_reduce_similar_claims_chain():
    """LLM 기반으로 의미적으로 유사하거나 중복되는 주장을 제거하는 체인을 구축합니다."""
    prompt = PromptTemplate.from_template("""
[역할]
당신은 제공된 주장 리스트에서 의미적으로 유사하거나 중복되는 주장을 식별하고, 
고유하고 핵심적인 주장들만 남겨 리스트 형태로 출력하는 전문가입니다.

[지시 사항]
- 각 주장은 의미론적으로 독립적이어야 합니다.
- 동일한 내용을 다른 방식으로 표현한 경우, 가장 명확하고 간결한 하나만 남깁니다.
- 당신이 새로운 주장을 만들어 내지 마십시오.
- 주장을 정치적, 인물적 중요도를 판단해 중요도 순으로 나열하세요.
- 출력 형식은 반드시 JSON 리스트여야 합니다. (예: ["주장1", "주장2"])

[입력 주장 리스트]
{claims_json}

[출력 형식]
["정제된 주장1", "정제된 주장2", ...]
""")
    
    return prompt | get_chat_llm()

def build_channel_type_classifier():
    prompt = PromptTemplate.from_template("""
[채널/영상 유형 분류 기준]
아래 중 가장 적합한 유형 하나를 선택하세요:

1. 선동형: 감정적 자극, 선동, 과장, 왜곡, 음모론, 혐오 발언이 많은 경우
2. 정보형: 객관적 정보, 데이터, 공식 자료 인용, 분석 위주
3. 논평형: 해설, 개인 의견, 가치 판단, 해석 위주
4. 혼합형: 정보와 선동, 정보와 논평 등 복수 유형이 혼합된 경우
5. 오락/가십형: 연예, 잡담, 풍자, 무당 예측, 썰 등 오락성 강한 경우
6. 기타/미분류: 위 범주에 속하지 않는 경우

[예시 출력]
채널 유형: 선동형  
분류 근거: 감정적 언사와 음모론, 검증 어려운 주장이 반복적으로 나타남.


[자막 전문]
{transcript}

당신의 답변:
""")
    return prompt | get_chat_llm()


def build_keyword_extractor_chain():
    prompt = PromptTemplate.from_template("""
[역할]
당신은 주어진 텍스트에서 핵심 키워드를 추출하는 전문가입니다.

[지시 사항]
- 주어진 텍스트에서 가장 중요하고 대표적인 키워드 9개를 추출하세요.
- 키워드는 명사 또는 명사구 형태여야 합니다.
- 각 키워드는 쉼표(,)로 구분하여 나열하세요.
- 불필요한 설명이나 문장은 포함하지 않고, 오직 키워드만 출력하세요.
- 광고성 내용(제품 홍보, 구매 유도 등)은 키워드에서 제외하세요.

[입력 텍스트]
{text}

[출력 형식]
키워드1, 키워드2, 키워드3, 키워드4, 키워드5, 키워드6, 키워드7, 키워드8, 키워드9
""")
    return prompt | get_chat_llm()


def build_three_line_summarizer_chain():
    prompt = PromptTemplate.from_template("""
[역할]
당신은 주어진 텍스트를 세 문장으로 간결하게 요약하는 전문가입니다.

[지시 사항]
- 주어진 텍스트의 핵심 내용을 정확히 세 문장으로 요약하세요.
- 각 문장은 간결하고 명확해야 합니다.
- 불필요한 서론이나 결론 없이, 오직 세 문장의 요약만 출력하세요.
- 광고성 내용(제품 홍보, 구매 유도 등)은 요약에 포함하지 마세요.

[입력 텍스트]
{text}

[출력 형식]
첫 번째 문장.
두 번째 문장.
세 번째 문장.
""")
    return prompt | get_chat_llm()
